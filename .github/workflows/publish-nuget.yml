name: Publish NuGet Package

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Validate Tag Format
        run: |
          if [[ ! "${GITHUB_REF_NAME}" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            echo "Invalid Tag Format. Use vX.Y.Z"
            exit 1
          fi

      - name: Set VERSION
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Run Tests
        run: dotnet test --configuration Release --no-restore

      - name: Build Project
        run: dotnet build --configuration Release --no-restore

      - name: Create NuGet Package
        run: dotnet pack --configuration Release --no-build

      - name: List Built Packages
        run: ls -al bin/Release/*.nupkg

      - name: Push To NuGet Gallery
        run: |
          dotnet nuget push bin/Release/*.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate

      - name: Push To GitHub Packages
        run: |
          dotnet nuget push bin/Release/*.nupkg \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --api-key ${{ secrets.GH_API_SECRET }} \
            --skip-duplicate

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_API_SECRET }}

      - name: Delete Existing Asset If Exists
        env:
          GH_TOKEN: ${{ secrets.GH_API_SECRET }}
        run: |
          ASSET_NAME="GenericRepository.EFCore.${{ env.VERSION }}.nupkg"
          if gh release view ${{ github.ref_name }} --json assets -q '.assets[].name' | grep "$ASSET_NAME"; then
            gh release delete-asset ${{ github.ref_name }} "$ASSET_NAME" --yes
          else
            echo "No existing asset to delete."
          fi

      - name: Upload Release Asset (via gh CLI)
        env:
          GH_TOKEN: ${{ secrets.GH_API_SECRET }}
        run: |
          gh release upload ${{ github.ref_name }} \
            "bin/Release/GenericRepository.EFCore.${{ env.VERSION }}.nupkg" \
            --clobber